/*
 * This file is generated by jOOQ.
 */
package com.soarse.abac.demo.generated.jooq.tables;


import com.soarse.abac.demo.generated.jooq.AbacDemo;
import com.soarse.abac.demo.generated.jooq.tables.records.EmployeeRecord;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Сотрудники медиахолдинга Логос
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employee extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>abac_demo.employee</code>
     */
    public static final Employee EMPLOYEE = new Employee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>abac_demo.employee.id</code>. Уникальный ID
     */
    public final TableField<EmployeeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "Уникальный ID");

    /**
     * The column <code>abac_demo.employee.name</code>. Имя
     */
    public final TableField<EmployeeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "Имя");

    /**
     * The column <code>abac_demo.employee.branch</code>. Отделение холдинга
     */
    public final TableField<EmployeeRecord, String> BRANCH = createField(DSL.name("branch"), SQLDataType.CLOB, this, "Отделение холдинга");

    /**
     * The column <code>abac_demo.employee.roles</code>. Роли
     */
    public final TableField<EmployeeRecord, JSONB> ROLES = createField(DSL.name("roles"), SQLDataType.JSONB.nullable(false).defaultValue(DSL.field("'[]'::jsonb", SQLDataType.JSONB)), this, "Роли");

    /**
     * The column <code>abac_demo.employee.skills</code>. Список компетенций
     */
    public final TableField<EmployeeRecord, JSONB> SKILLS = createField(DSL.name("skills"), SQLDataType.JSONB.nullable(false).defaultValue(DSL.field("'[]'::jsonb", SQLDataType.JSONB)), this, "Список компетенций");

    /**
     * The column <code>abac_demo.employee.passport</code>. Номер паспорта
     */
    public final TableField<EmployeeRecord, String> PASSPORT = createField(DSL.name("passport"), SQLDataType.CLOB, this, "Номер паспорта");

    /**
     * The column <code>abac_demo.employee.salary</code>. Зарплата в рублях
     */
    public final TableField<EmployeeRecord, Integer> SALARY = createField(DSL.name("salary"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "Зарплата в рублях");

    private Employee(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Сотрудники медиахолдинга Логос"), TableOptions.table());
    }

    /**
     * Create an aliased <code>abac_demo.employee</code> table reference
     */
    public Employee(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>abac_demo.employee</code> table reference
     */
    public Employee(Name alias) {
        this(alias, EMPLOYEE);
    }

    /**
     * Create a <code>abac_demo.employee</code> table reference
     */
    public Employee() {
        this(DSL.name("employee"), null);
    }

    public <O extends Record> Employee(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return AbacDemo.ABAC_DEMO;
    }

    @Override
    public Employee as(String alias) {
        return new Employee(DSL.name(alias), this);
    }

    @Override
    public Employee as(Name alias) {
        return new Employee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(String name) {
        return new Employee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Name name) {
        return new Employee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, JSONB, JSONB, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
