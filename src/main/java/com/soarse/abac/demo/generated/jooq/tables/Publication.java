/*
 * This file is generated by jOOQ.
 */
package com.soarse.abac.demo.generated.jooq.tables;


import com.soarse.abac.demo.generated.jooq.AbacDemo;
import com.soarse.abac.demo.generated.jooq.tables.records.PublicationRecord;

import java.time.LocalDate;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Публикации медиахолдинга Логос
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publication extends TableImpl<PublicationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>abac_demo.publication</code>
     */
    public static final Publication PUBLICATION = new Publication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicationRecord> getRecordType() {
        return PublicationRecord.class;
    }

    /**
     * The column <code>abac_demo.publication.id</code>.
     */
    public final TableField<PublicationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>abac_demo.publication.branch</code>. Отделение холдинга
     */
    public final TableField<PublicationRecord, String> BRANCH = createField(DSL.name("branch"), SQLDataType.CLOB, this, "Отделение холдинга");

    /**
     * The column <code>abac_demo.publication.theme</code>. Тема публикации
     */
    public final TableField<PublicationRecord, String> THEME = createField(DSL.name("theme"), SQLDataType.CLOB, this, "Тема публикации");

    /**
     * The column <code>abac_demo.publication.author_id</code>. ID автора
     */
    public final TableField<PublicationRecord, UUID> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "ID автора");

    /**
     * The column <code>abac_demo.publication.status</code>. Статус публикации
     */
    public final TableField<PublicationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'В работе'::text", SQLDataType.CLOB)), this, "Статус публикации");

    /**
     * The column <code>abac_demo.publication.publication_date</code>. Дата отображения публикации на информационном портале
     */
    public final TableField<PublicationRecord, LocalDate> PUBLICATION_DATE = createField(DSL.name("publication_date"), SQLDataType.LOCALDATE, this, "Дата отображения публикации на информационном портале");

    /**
     * The column <code>abac_demo.publication.title</code>. Название публикации
     */
    public final TableField<PublicationRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "Название публикации");

    private Publication(Name alias, Table<PublicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publication(Name alias, Table<PublicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Публикации медиахолдинга Логос"), TableOptions.table());
    }

    /**
     * Create an aliased <code>abac_demo.publication</code> table reference
     */
    public Publication(String alias) {
        this(DSL.name(alias), PUBLICATION);
    }

    /**
     * Create an aliased <code>abac_demo.publication</code> table reference
     */
    public Publication(Name alias) {
        this(alias, PUBLICATION);
    }

    /**
     * Create a <code>abac_demo.publication</code> table reference
     */
    public Publication() {
        this(DSL.name("publication"), null);
    }

    public <O extends Record> Publication(Table<O> child, ForeignKey<O, PublicationRecord> key) {
        super(child, key, PUBLICATION);
    }

    @Override
    public Schema getSchema() {
        return AbacDemo.ABAC_DEMO;
    }

    @Override
    public Publication as(String alias) {
        return new Publication(DSL.name(alias), this);
    }

    @Override
    public Publication as(Name alias) {
        return new Publication(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publication rename(String name) {
        return new Publication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publication rename(Name name) {
        return new Publication(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, UUID, String, LocalDate, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
